import {Data, Form, MenuItemOnPressEvent, Context} from "@devvit/public-api";
import {ArchiverSettings} from "../features/archiver.js";
import {SETTING_DEFAULTS} from "../settings/defaults.js";
import {hasPermissions, toNumberOrDefault} from "devvit-helpers";
import {ARCHIVE_FORM_HELP_TEXTS, ARCHIVE_FORM_LABELS} from "./strings.js";
import {getAppSettings} from "../settings/loader.js";
import {archiverFormKey} from "../main.js";

export async function archiverFormButton (event: MenuItemOnPressEvent, context: Context) {
    const userId = context.userId;
    if (!userId) {
        console.error("archiverFormButton: userId is missing");
        return;
    }

    const user = await context.reddit.getUserById(userId);
    const subreddit = await context.reddit.getCurrentSubreddit();
    if (!await hasPermissions(context.reddit, {username: user.username, subredditName: subreddit.name, requiredPerms: "mail"})) {
        context.ui.showToast("You must have mail permissions to use this feature!");
        console.log(`archiverFormButton: ${user.username} doesn't have mail permissions`);
        return;
    }

    const config = await getAppSettings(context.settings);
    return context.ui.showForm(
        archiverFormKey,
        {
            archiverNoHighlighteds: config.archiverNoHighlighteds,
            archiveLastReplyUser: config.archiveLastReplyUser,
            archiveLastReplyMod: config.archiveLastReplyMod,
            archiveAutoGenerated: config.archiveAutoGenerated,
        }
    );
}

export function createArchiverForm (data: Data): Form {
    const archiverSettings: ArchiverSettings = {
        archiverNoHighlighteds: Boolean(data.archiverNoHighlighteds ?? SETTING_DEFAULTS.archiverNoHighlighteds),
        archiveLastReplyUser: toNumberOrDefault(data.archiveLastReplyUser, SETTING_DEFAULTS.archiveLastReplyUser),
        archiveLastReplyMod: toNumberOrDefault(data.archiveLastReplyMod, SETTING_DEFAULTS.archiveLastReplyMod),
        archiveAutoGenerated: toNumberOrDefault(data.archiveAutoGenerated, SETTING_DEFAULTS.archiveAutoGenerated),
    };

    return {
        title: ARCHIVE_FORM_LABELS.title,
        description: ARCHIVE_FORM_HELP_TEXTS.title,
        acceptLabel: ARCHIVE_FORM_LABELS.acceptLabel,
        cancelLabel: ARCHIVE_FORM_LABELS.cancelLabel,
        fields: [
            {
                type: "boolean",
                name: "archiverNoHighlighteds",
                label: ARCHIVE_FORM_LABELS.archiverNoHighlighteds,
                helpText: ARCHIVE_FORM_HELP_TEXTS.archiverNoHighlighteds,
                defaultValue: archiverSettings.archiverNoHighlighteds,
            },
            {
                type: "number",
                name: "archiveLastReplyUser",
                label: ARCHIVE_FORM_LABELS.archiveLastReplyUser,
                helpText: ARCHIVE_FORM_HELP_TEXTS.archiveLastReplyUser,
                defaultValue: archiverSettings.archiveLastReplyUser,
                required: true,
            },
            {
                type: "number",
                name: "archiveLastReplyMod",
                label: ARCHIVE_FORM_LABELS.archiveLastReplyMod,
                helpText: ARCHIVE_FORM_HELP_TEXTS.archiveLastReplyMod,
                defaultValue: archiverSettings.archiveLastReplyMod,
                required: true,
            },
            {
                type: "number",
                name: "archiveAutoGenerated",
                label: ARCHIVE_FORM_LABELS.archiveAutoGenerated,
                helpText: ARCHIVE_FORM_HELP_TEXTS.archiveAutoGenerated,
                defaultValue: archiverSettings.archiveAutoGenerated,
                required: true,
            },
        ],
    };
}
