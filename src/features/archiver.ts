import {RedditAPIClient, ConversationData} from "@devvit/public-api";
import {AppSettings} from "../settings/loader.js";
import {getModmailConversations, getTimeDeltaInSeconds, sortConversations} from "devvit-helpers";

export type ArchiverSettings = Pick<AppSettings, "archiverNoHighlighteds" | "archiveLastReplyUser" | "archiveLastReplyMod" | "archiveAutoGenerated">;

export async function runModmailArchiver (reddit: RedditAPIClient, config: ArchiverSettings): Promise<number> {
    console.log(config);

    const subreddit = await reddit.getCurrentSubreddit();

    let allModmails: ConversationData[] = [];
    try {
        allModmails = await getModmailConversations(reddit.modMail, {
            subreddits: [subreddit.name],
            limit: Infinity,
            state: "all",
            sort: "recent",
        });
    } catch (e) {
        // getModmailConversations from devvit-helpers is still in testing, so just in case it fails
        // we'll fall back to only processing 100 modmails
        console.error("Failed to get modmails using getModmailConversations, trying other way", e);
        try {
            allModmails = sortConversations(Object.values((await reddit.modMail.getConversations({
                subreddits: [subreddit.name],
                limit: 100,
                state: "all",
                sort: "recent",
            })).conversations), "recent");
        } catch (e) {
            console.error("Failed to get modmails using other way too", e);
            return 0;
        }
    }

    console.log(`Found ${allModmails.length} modmails`);

    const now = new Date();
    let archived = 0;
    // We're getting the modmails recent first,
    // so reversing the array will make it process oldest first
    for (const modmail of allModmails.reverse()) {
        console.log(`Processing ${modmail.id}: ${modmail.subject}`);
        if (!modmail.id) {
            console.warn("Modmail without ID?? ", modmail);
            continue;
        }

        if (modmail.conversationType === "internal") {
            console.log(`Skipping internal ${modmail.id}`);
            continue;
        }

        if (modmail.isHighlighted && !config.archiverNoHighlighteds) {
            console.log(`Skipping highlighted ${modmail.id}`);
            continue;
        }

        let archive = false;
        if (modmail.lastUpdated) {
            const lastUpdatedDate = new Date(modmail.lastUpdated);
            if (modmail.lastUpdated === modmail.lastModUpdate) {
                archive = getTimeDeltaInSeconds(now, lastUpdatedDate) >= config.archiveLastReplyMod * 60 * 60;
            } else if (!modmail.isAuto && modmail.lastUpdated === modmail.lastUserUpdate) {
                archive = getTimeDeltaInSeconds(now, lastUpdatedDate) >= config.archiveLastReplyUser * 60 * 60;
            } else if (modmail.isAuto) {
                archive = getTimeDeltaInSeconds(now, lastUpdatedDate) >= config.archiveAutoGenerated * 60 * 60;
            }
        }

        if (archive) {
            console.log(`Archiving ${modmail.id}`);
            try {
                archived++;
                await reddit.modMail.archiveConversation(modmail.id);
            } catch (e) {
                console.error(`Failed to archive ${modmail.id}`, e);
            }
        }
    }

    return archived;
}
